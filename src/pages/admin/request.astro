---
import Layout from '../../layouts/Layout.astro';

// ‚ö†Ô∏è TEMPORARY PROMPT - WILL BE REPLACED
const DEFAULT_SYSTEM_PROMPT = `Generate article content.`.trim();
---

<Layout title="Admin - Request Article">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">Request New Article</h1>
      <a href="/admin" class="text-blue-600 hover:text-blue-700 font-medium">‚Üê Back to Articles</a>
    </div>
    
    <div class="bg-white shadow rounded-lg p-6">
      <form id="article-form" class="space-y-6">
        <!-- Vertical -->
        <div>
          <label for="vertical" class="block text-sm font-medium text-gray-700 mb-1">
            Vertical <span class="text-red-500">*</span>
          </label>
          <select id="vertical" name="vertical" required 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
            <option value="">Select vertical...</option>
            <option value="health">Health</option>
            <option value="beauty">Beauty</option>
            <option value="automotive">Automotive</option>
            <option value="real_estate">Real Estate</option>
            <option value="loans">Loans</option>
            <option value="credit_and_banking">Credit and Banking</option>
            <option value="insurance">Insurance</option>
            <option value="legal">Legal</option>
            <option value="education">Education</option>
            <option value="career">Career</option>
            <option value="business">Business</option>
            <option value="technology">Technology</option>
            <option value="software">Software</option>
            <option value="travel">Travel</option>
            <option value="luxury">Luxury</option>
            <option value="home_improvement">Home Improvement</option>
            <option value="shopping">Shopping</option>
            <option value="food">Food</option>
            <option value="lifestyle">Lifestyle</option>
            <option value="energy">Energy</option>
            <option value="family">Family</option>
            <option value="pets">Pets</option>
          </select>
        </div>

        <!-- Keywords -->
        <div>
          <label for="keywords" class="block text-sm font-medium text-gray-700 mb-1">
            Keywords <span class="text-red-500">*</span>
          </label>
          <input type="text" id="keywords" name="keywords" required
            placeholder="401k, Roth IRA, compound interest"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
          <p class="mt-1 text-sm text-gray-500">Separate keywords with commas (e.g., keyword1, keyword2, keyword3)</p>
        </div>

        <!-- Target Languages -->
        <div>
          <label for="target_language" class="block text-sm font-medium text-gray-700 mb-1">
            Target Language <span class="text-red-500">*</span>
          </label>
          <select id="target_language" name="target_language" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
            <option value="en">English</option>
            <option value="es">Spanish</option>
            <option value="de">German</option>
            <option value="fr">French</option>
            <option value="pt">Portuguese</option>
            <option value="it">Italian</option>
            <option value="ar">Arabic</option>
            <option value="hi">Indian</option>
            <option value="ja">Japanese</option>
          </select>
        </div>

        <!-- AI Provider Selection -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Content Generator <span class="text-red-500">*</span>
          </label>
          <div class="space-y-2">
            <label class="flex items-center">
              <input type="radio" name="provider" value="openai" checked class="mr-2 h-4 w-4 text-blue-600">
              <span class="font-semibold text-blue-600">OpenAI GPT-4 (Recommended)</span>
            </label>
            <label class="flex items-center">
              <input type="radio" name="provider" value="groq" class="mr-2 h-4 w-4 text-gray-600">
              <span>Groq LLaMA (Fast)</span>
            </label>
          </div>
        </div>

        <!-- Headline (Topic) -->
        <div>
          <label for="topic" class="block text-sm font-medium text-gray-700 mb-1">
            Headline (Topic) <span class="text-red-500">*</span>
          </label>
          <input type="text" id="topic" name="topic" required
            placeholder="e.g., How Millennials Can Retire Comfortably"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
        </div>

        <!-- Seed Content -->
        <div>
          <label for="seed_content" class="block text-sm font-medium text-gray-700 mb-1">
            Intro (optional)
          </label>
          <textarea id="seed_content" name="seed_content" rows="4"
            placeholder="Intro paragraph or outline..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"></textarea>
        </div>

        <!-- Generation Phrases (NEW) -->
        <div>
          <label for="generation_phrases" class="block text-sm font-medium text-gray-700 mb-1">
            Generation Phrases (optional)
          </label>
          <input type="text" id="generation_phrases" name="generation_phrases"
            placeholder="phrase1, phrase2, phrase3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
          <p class="mt-1 text-sm text-gray-500">3 phrases to guide content generation (separated by commas)</p>
        </div>

        <!-- Show RSOC Feed -->
        <div>
          <label class="flex items-center cursor-pointer">
            <input 
              type="checkbox" 
              id="showRsocFeed" 
              name="showRsocFeed"
              checked
              class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 mr-2"
            />
            <span class="text-sm font-medium text-gray-700">  
              RSOC FEED
            </span>
          </label>
        </div>

        <!-- Advanced Options (Hidden Fields) -->
        <details class="border border-gray-200 rounded-md">
          <summary class="px-4 py-3 cursor-pointer font-medium text-gray-700 hover:bg-gray-50">
            ‚öôÔ∏è Advanced Options (Optional)
          </summary>
          <div class="p-4 border-t bg-gray-50 space-y-4">
            <!-- Tone -->
            <div>
              <label for="tone" class="block text-sm font-medium text-gray-700 mb-1">
                Tone
              </label>
              <select id="tone" name="tone"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                <option value="">Select tone...</option>
                <option value="informative">Informative</option>
                <option value="persuasive">Persuasive</option>
                <option value="casual">Casual</option>
                <option value="professional">Professional</option>
              </select>
            </div>

            <!-- Word Count -->
            <div>
              <label for="word_count" class="block text-sm font-medium text-gray-700 mb-1">
                Word Count
              </label>
              <input type="number" id="word_count" name="word_count" min="300" max="5000"
                placeholder="e.g., 900"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
            </div>

            <!-- External Reference -->
            <div>
              <label for="external_ref" class="block text-sm font-medium text-gray-700 mb-1">
                External Reference
              </label>
              <input type="text" id="external_ref" name="external_ref"
                placeholder="e.g., tarzo-job-8b1a"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
            </div>

            <!-- Campaign ID -->
            <div>
              <label for="campaign_id" class="block text-sm font-medium text-gray-700 mb-1">
                Campaign ID
              </label>
              <input type="text" id="campaign_id" name="campaign_id"
                placeholder="e.g., cmp_12345"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
            </div>

            <!-- System Prompt -->
            <div>
              <p class="text-sm text-gray-600 mb-2">
                ‚ö†Ô∏è TEMPORARY PROMPT - Edit the AI system prompt to customize content generation behavior.
              </p>
              <textarea 
                id="system_prompt" 
                name="system_prompt" 
                rows="8"
                class="w-full px-3 py-2 border border-gray-300 rounded-md font-mono text-xs focus:ring-2 focus:ring-blue-500"
              >{DEFAULT_SYSTEM_PROMPT}</textarea>
              <button type="button" id="reset-prompt-btn"
                class="mt-2 px-4 py-2 text-sm bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                üîÑ Reset to Default
              </button>
            </div>
          </div>
        </details>

        <!-- Buttons -->
        <div class="flex gap-4 pt-4 border-t">
          <button type="submit" id="submit-btn"
            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 disabled:bg-gray-300 disabled:cursor-not-allowed">
            Request Article
          </button>
          <button type="reset"
            class="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
            Reset
          </button>
        </div>

        <div id="status-message" class="hidden mt-4 p-4 rounded-md"></div>
      </form>
    </div>
  </div>

  <script>
    // ‚ö†Ô∏è TEMPORARY PROMPT - WILL BE REPLACED
    const DEFAULT_SYSTEM_PROMPT = `Generate article content.`.trim();

    const API_BASE = import.meta.env.PUBLIC_API_BASE;
    const form = document.getElementById('article-form');
    const submitBtn = document.getElementById('submit-btn');
    const statusMsg = document.getElementById('status-message');
    const resetPromptBtn = document.getElementById('reset-prompt-btn');
    const systemPromptTextarea = document.getElementById('system_prompt');

    // Reset prompt to default
    resetPromptBtn.addEventListener('click', () => {
      systemPromptTextarea.value = DEFAULT_SYSTEM_PROMPT;
    });

    function showStatus(message, type = 'info') {
      statusMsg.textContent = message;
      statusMsg.className = `mt-4 p-4 rounded-md ${
        type === 'success' ? 'bg-green-100 text-green-800' :
        type === 'error' ? 'bg-red-100 text-red-800' :
        'bg-blue-100 text-blue-800'
      }`;
      statusMsg.classList.remove('hidden');
    }

    function validateForm(formData) {
      const language = formData.get('target_language');
      if (!language) {
        showStatus('Please select a target language', 'error');
        return false;
      }
      return true;
    }

    function buildPayload(formData) {
      const keywords = formData.get('keywords')
        .split(',')
        .map(k => k.trim())
        .filter(k => k.length > 0);

      // Process generation_phrases (NEW)
      const generationPhrasesRaw = formData.get('generation_phrases');
      const generationPhrases = generationPhrasesRaw
        ? generationPhrasesRaw.split(',').map(p => p.trim()).filter(p => p.length > 0)
        : [];

      // Build options - only include if value exists
      const options = {};
      if (formData.get('seed_content')) options.seed_content = formData.get('seed_content');
      if (generationPhrases.length > 0) options.generation_phrases = generationPhrases;
      if (formData.get('tone')) options.tone = formData.get('tone');
      if (formData.get('word_count')) options.word_count = parseInt(formData.get('word_count'));
      
      // Add system_prompt if it's different from default
      const systemPrompt = formData.get('system_prompt')?.trim();
      if (systemPrompt && systemPrompt !== DEFAULT_SYSTEM_PROMPT) {
        options.system_prompt = systemPrompt;
      }

      // Build metadata - only include if value exists
      const metadata = {};
      if (formData.get('external_ref')) metadata.external_ref = formData.get('external_ref');
      if (formData.get('campaign_id')) metadata.campaign_id = formData.get('campaign_id');

      return {
        vertical: formData.get('vertical'),
        topic: formData.get('topic'),
        keywords: keywords,
        target_languages: [formData.get('target_language')],
        provider: formData.get('provider') || 'openai',
        siteId: import.meta.env.PUBLIC_SITE_ID || 'infostreamhub',
        options: Object.keys(options).length > 0 ? options : {},
        metadata: Object.keys(metadata).length > 0 ? metadata : {}
      };
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      if (!validateForm(formData)) return;

      const provider = formData.get('provider');
      submitBtn.disabled = true;
      submitBtn.textContent = `Generating with ${provider === 'openai' ? 'OpenAI' : 'Groq'}...`;
      showStatus(`Submitting article request to ${provider === 'openai' ? 'OpenAI GPT-4' : 'Groq LLaMA'}...`, 'info');

      try {
        const payload = buildPayload(formData);
        console.log('Payload:', payload);
        
        const response = await fetch(`${import.meta.env.PUBLIC_API_BASE}/api/v1/content/articles/auto`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer tarzo-key-001'
          },
          body: JSON.stringify(payload)
        });

        if (response.ok) {
          const result = await response.json();
          showStatus(`‚úì Article created successfully with ${result.provider}! Slug: ${result.slug}`, 'success');
          setTimeout(() => {
            window.location.replace('/admin');
            window.location.reload(true);
          }, 2000);
        } else {
          const error = await response.text();
          showStatus(`Error: ${response.status} - ${error}`, 'error');
        }
      } catch (error) {
        showStatus(`Network error: ${error.message}`, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Request Article';
      }
    });
  </script>
</Layout>